generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id             String         @id @default(uuid())
  name           String
  slug           String
  description    String
  avatarImageUrl String
  coverImageUrl  String
  MenuCategories   MenuCategory[]
  Products        Product[]
  Orders          Order[]
  createAt       DateTime       @default(now())
  updateAt       DateTime       @updatedAt
}

model MenuCategory {
  id           String     @id @default(uuid())
  name         String
  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
  Products     Product[]
  createAt     DateTime   @default(now())
  updateAt     DateTime   @updatedAt
}

model Product {
  id             String         @id @default(uuid())
  name           String
  description    String
  price          Float
  imageUrl       String
  ingredients    String[]
  OrderProducts  OrderProduct[]
  Restaurant     Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId   String
  MenuCategory   MenuCategory   @relation(fields: [menuCategoryId], references: [id], onDelete: Cascade)
  menuCategoryId String
  createAt       DateTime       @default(now())
  updateAt       DateTime   @updatedAt
}

model Order {
  id                Int               @id @default(autoincrement())
  total             Float
  status            OrderStatus
  consumptionMethod ConsumptionMethod
  Restaurant        Restaurant        @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId      String
  OrderProducts     OrderProduct[]
  createAt          DateTime          @default(now())
  updateAt          DateTime   @updatedAt
}

model OrderProduct {
  id        String   @id @default(uuid())
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  Order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  quantity  Int
  price     Float
  createAt  DateTime @default(now())
  updateAt  DateTime   @updatedAt
}

enum ConsumptionMethod {
  TAKEWAY
  DINE_IN
}

enum OrderStatus {
  PENDING
  IN_PREPARATION
  FINISHED
}
